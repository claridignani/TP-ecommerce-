{
  "ast": null,
  "code": "import { URL_SERVICIOS } from 'src/app/config/config';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n  login(email, password) {\n    let URL = URL_SERVICIOS + \"users/login\";\n    return this.http.post(URL, {\n      email,\n      password\n    }).pipe(map(resp => {\n      if (resp.USER_FRONTEND && resp.USER_FRONTEND.token) {\n        //ALMACENAR EL TOKEN EN EL LOCALSTORAGE\n        return this.localStorageSave(resp.USER_FRONTEND);\n      } else {\n        //DEVUELVE EL STATUS\n        return resp;\n      }\n    }), catchError(erro => {\n      console.log(erro);\n      return erro;\n    }));\n  }\n  localStorageSave(USER_FRONTEND) {\n    localStorage.setItem(\"token\", USER_FRONTEND.token), localStorage.setItem(\"user\", USER_FRONTEND.user);\n    return true;\n  }\n  registro(data) {\n    let URL = URL_SERVICIOS + \"users/register\";\n    return this.http.post(URL, data);\n  }\n  logout() {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"user\");\n    this.router.navigate([\"auth/login\"]);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});",
  "map": {
    "version": 3,
    "mappings": "AAGA,SAASA,aAAa,QAAQ,uBAAuB;AACrD,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;;AAKhD,OAAM,MAAOC,WAAW;EAEtBC,YACUC,IAAgB,EAChBC,MAAc;IADd,SAAI,GAAJD,IAAI;IACJ,WAAM,GAANC,MAAM;EACZ;EACJC,KAAK,CAAEC,KAAY,EAACC,QAAe;IACjC,IAAIC,GAAG,GAAGV,aAAa,GAAG,aAAa;IACvC,OAAO,IAAI,CAACK,IAAI,CAACM,IAAI,CAACD,GAAG,EAAC;MAACF,KAAK;MAAEC;IAAQ,CAAC,CAAC,CAACG,IAAI,CAC/CV,GAAG,CAAEW,IAAQ,IAAG;MACd,IAAIA,IAAI,CAACC,aAAa,IAAID,IAAI,CAACC,aAAa,CAACC,KAAK,EAAC;QACjD;QACA,OAAO,IAAI,CAACC,gBAAgB,CAAEH,IAAI,CAACC,aAAa,CAAC;OAClD,MAAI;QACH;QACA,OAAOD,IAAI;;IAEf,CAAC,CAAE,EACHZ,UAAU,CAAGgB,IAAQ,IAAI;MACvBC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACH;EACAD,gBAAgB,CAAEI,YAAiB;IACnCC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,YAAY,CAACL,KAAK,CAAC,EACjDM,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEF,YAAY,CAACG,IAAI,CAAC;IAC/C,OAAO,IAAI;EACb;EACAC,QAAQ,CAACC,IAAQ;IACf,IAAIf,GAAG,GAAGV,aAAa,GAAG,gBAAgB;IAC1C,OAAO,IAAI,CAACK,IAAI,CAACM,IAAI,CAACD,GAAG,EAACe,IAAI,CAAC;EACjC;EAEAC,MAAM;IACJL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCN,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;EACtC;;;mBAtCazB,WAAW;AAAA;;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;EAAA2B,YAFV;AAAM",
    "names": [
      "URL_SERVICIOS",
      "catchError",
      "map",
      "AuthService",
      "constructor",
      "http",
      "router",
      "login",
      "email",
      "password",
      "URL",
      "post",
      "pipe",
      "resp",
      "USER_FRONTEND",
      "token",
      "localStorageSave",
      "erro",
      "console",
      "log",
      "USER_FRONTEND",
      "localStorage",
      "setItem",
      "user",
      "registro",
      "data",
      "logout",
      "removeItem",
      "navigate",
      "factory",
      "providedIn"
    ],
    "sourceRoot": "",
    "sources": [
      "C:\\Users\\Educa informatica\\Desktop\\DSW\\E-COMMERCE\\TP\\ecommerce\\src\\app\\modules\\auth-profile\\_services\\auth.service.ts"
    ],
    "sourcesContent": [
      "import { Injectable } from '@angular/core';\nimport { HttpClient} from '@angular/common/http'; \nimport { Router } from '@angular/router';\nimport { URL_SERVICIOS } from 'src/app/config/config';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  constructor(\n    private http: HttpClient,\n    private router: Router,\n  ) { }\n  login (email:string,password:string){\n    let URL = URL_SERVICIOS + \"users/login\"\n    return this.http.post(URL,{email, password}).pipe(\n      map((resp:any)=> {\n        if (resp.USER_FRONTEND && resp.USER_FRONTEND.token){\n          //ALMACENAR EL TOKEN EN EL LOCALSTORAGE\n          return this.localStorageSave (resp.USER_FRONTEND)\n        }else{\n          //DEVUELVE EL STATUS\n          return resp;\n        }\n      } ),\n      catchError ((erro:any) =>{\n        console.log(erro);\n        return erro;\n      })\n    )\n  }\n  localStorageSave (USER_FRONTEND: any){\n  localStorage.setItem(\"token\", USER_FRONTEND.token),\n  localStorage.setItem(\"user\", USER_FRONTEND.user);\n  return true;\n}\nregistro(data:any){\n  let URL = URL_SERVICIOS + \"users/register\";\n  return this.http.post(URL,data);\n}\n\nlogout(){\n  localStorage.removeItem(\"token\");\n  localStorage.removeItem(\"user\");\n  this.router.navigate([\"auth/login\"])\n}\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module",
  "externalDependencies": []
}
